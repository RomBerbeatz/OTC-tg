"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import sqlite3
import hashlib
import os
from datetime import datetime

def simple_hash(password):
    """–ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def create_simple_admin():
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ"""
    
    print("üöÄ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("=" * 40)
    
    db_path = "./marketplace.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö marketplace.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–º–æ—Ç—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã users...")
        cursor.execute("PRAGMA table_info(users);")
        columns = [row[1] for row in cursor.fetchall()]
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {columns}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT * FROM users LIMIT 3;")
        existing = cursor.fetchall()
        print(f"üë• –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(existing)}")
        for user in existing:
            print(f"   {user}")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        username = "admin"
        password = "password123"
        
        print(f"\nüìù –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"   Username: {username}")
        print(f"   Password: {password}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        cursor.execute("SELECT COUNT(*) FROM users WHERE username = ?", (username,))
        if cursor.fetchone()[0] > 0:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            update_query = "UPDATE users SET "
            update_values = []
            
            if 'password' in columns:
                update_query += "password = ?"
                update_values.append(simple_hash(password))
            elif 'password_hash' in columns:
                update_query += "password_hash = ?"
                update_values.append(simple_hash(password))
            
            if 'role' in columns:
                if update_values:
                    update_query += ", "
                update_query += "role = ?"
                update_values.append('admin')
            
            update_query += " WHERE username = ?"
            update_values.append(username)
            
            if update_values:
                cursor.execute(update_query, update_values)
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            insert_fields = ['username']
            insert_values = [username]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª—é–±–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            password_added = False
            for pwd_field in ['password', 'password_hash', 'hashed_password']:
                if pwd_field in columns and not password_added:
                    insert_fields.append(pwd_field)
                    insert_values.append(simple_hash(password))
                    password_added = True
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'role' in columns:
                insert_fields.append('role')
                insert_values.append('admin')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'is_active' in columns:
                insert_fields.append('is_active')
                insert_values.append(1)
            
            if 'is_admin' in columns:
                insert_fields.append('is_admin')
                insert_values.append(1)
            
            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            if 'created_at' in columns:
                insert_fields.append('created_at')
                insert_values.append(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É
            placeholders = ', '.join(['?' for _ in insert_values])
            fields_str = ', '.join(insert_fields)
            
            query = f"INSERT INTO users ({fields_str}) VALUES ({placeholders})"
            print(f"üîß SQL: {query}")
            print(f"üìä –ó–Ω–∞—á–µ–Ω–∏—è: {insert_fields}")
            
            cursor.execute(query, insert_values)
            print("‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        admin_user = cursor.fetchone()
        
        print("\nüéâ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("=" * 40)
        print(f"üìã –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_user}")
        print(f"üë§ Username: {username}")
        print(f"üîê Password: {password}")
        print("=" * 40)
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    create_simple_admin()